import org.joda.time.YearMonth;
import it.cnr.iit.epas.security.PermissionCheck
import it.cnr.iit.epas.models.enumerate.AccountRole
import it.cnr.iit.epas.models.UsersRolesOffices;
import it.cnr.iit.epas.models.absences.Absence;
import it.cnr.iit.epas.models.Office;
import it.cnr.iit.epas.models.Person;
import it.cnr.iit.epas.models.Role;
import it.cnr.iit.epas.models.PersonReperibility;
import it.cnr.iit.epas.models.PersonReperibilityType;
import it.cnr.iit.epas.models.Configuration;
import it.cnr.iit.epas.models.PersonConfiguration;
import it.cnr.iit.epas.models.ReperibilityTypeMonth;
import it.cnr.iit.epas.manager.configurations.EpasParam;

global it.cnr.iit.epas.models.User currentUser;
global java.util.Set userRoles;
global java.util.List userRolesOffices;

/*******************************************************************************
 * Azioni ruolo DEVELOPER e ADMIN
 ******************************************************************************/
rule SystemUsers
salience 1
activation-group 'admin'
when
  AccountRole(this in (AccountRole.DEVELOPER,AccountRole.ADMIN)) from userRoles
  $c: PermissionCheck(toCheck())
then
  $c.grant();
end

rule AnyUser
when
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/userinfo") ||
    permission.startsWith("/rest/v4/personinfo"),
    toCheck())
then
 $c.grant();
end

/*******************************************************************************
 * Azioni utente dipendente sui propri dati
 ******************************************************************************/

rule Employee_personal_data
when
 $c: PermissionCheck(
    (permission.startsWith("/rest/v4/vacations") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/monthrecaps") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/init/yearsdropdown") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/people") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/absences") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/competences") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/reperibilitycalendar") && httpMethod.equalsIgnoreCase('GET')),
    toCheck(), target == null)
then
 $c.grant();
end

rule IsEmployee_personal_data_usingTarget
when
 $p: Person(user == currentUser)
 $c: PermissionCheck(
    (permission.startsWith("/rest/v4/vacations") && httpMethod.equalsIgnoreCase('GET'))  ||
    (permission.startsWith("/rest/v4/monthrecaps") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/people") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/absences") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/competences") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/reperibilitycalendar") && httpMethod.equalsIgnoreCase('GET')),
    toCheck(), target == $p)
then
 $c.grant();
end

/*Ruolo per vedere il calendario per i reperibili e le richieste di cambio reperibilità*/

rule isAvailable_general
when 
  $uro: UsersRolesOffices()
  Role(name == Role.EMPLOYEE) from $uro.role
  $p: Person (reperibility != null) from currentUser.getPerson()
  $o: Office() from $p.office
  Configuration(epasParam == EpasParam.ENABLE_CALENDAR_REPERIBILITY, fieldValue == true) from $o.configurations	
  $c: PermissionCheck(
  	permission.startsWith("/rest/v4/reperibilitycalendar") && httpMethod.equalsIgnoreCase('GET'),
   	target == null, granted == false)
then
 $c.grant();
end

rule isAvailable_personReperibilityType
when
	$p: Person (reperibility != null) from currentUser.getPerson()
	$o: Office() from $p.office
  	Configuration(epasParam == EpasParam.ENABLE_CALENDAR_REPERIBILITY, fieldValue == true) from $o.configurations	
	$pr: PersonReperibility() from $p.reperibility
	$prt: PersonReperibilityType() from $pr.personReperibilityType
	$c: PermissionCheck(
      permission.startsWith("/rest/v4/reperibilitycalendar") && httpMethod.equalsIgnoreCase('GET'), 
      target == $prt, granted == false)
then
$c.grant();
end

/*******************************************************************************
 * Visualizzazione e gestione ferie utente con ruolo PERSONNEL_ADMIN
 ******************************************************************************/

rule Vacation_show_and_manage_personnel_admin
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.PERSONNEL_ADMIN) from $uro.role
 $c: PermissionCheck(
    (permission.startsWith("/rest/v4/vacations") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/monthrecaps") && httpMethod.equalsIgnoreCase('GET')) ||
    permission.startsWith("/rest/v4/absences") ||
    (permission.startsWith("/rest/v4/competences") && httpMethod.equalsIgnoreCase('GET')),
    toCheck(), target == null)
then
 $c.grant();
end

rule Vacation_show_and_manage_personnel_admin_InOffice
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.PERSONNEL_ADMIN) from $uro.role
 $p: Person(user != currentUser, getOffice() == $uro.getOffice())
 $c: PermissionCheck(
    (permission.startsWith("/rest/v4/vacations") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/monthrecaps") && httpMethod.equalsIgnoreCase('GET')) ||
    permission.startsWith("/rest/v4/absences") ||
    (permission.startsWith("/rest/v4/competences") && httpMethod.equalsIgnoreCase('GET')),
    toCheck(), target == $p)
then
 $c.grant();
end

rule Vacation_show_and_manage_personnel_admin_InOffice_own_absences
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.PERSONNEL_ADMIN) from $uro.role
 $p: Person(qualification != null) from currentUser.getPerson()
 $c: PermissionCheck(
    (permission.startsWith("/rest/v4/vacations") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/monthrecaps") && httpMethod.equalsIgnoreCase('GET')) ||
    permission.startsWith("/rest/v4/absences") ||
    (permission.startsWith("/rest/v4/competences") && httpMethod.equalsIgnoreCase('GET')),
    toCheck(), target == $p)
then
 $c.grant();
end

/*******************************************************************************
 * Azioni utente per inserimento assenze
 ******************************************************************************/
/*
 * L'amministratore del personale può modificare una determinata assenza se:
 */
rule AdminCanEditAbsence
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.PERSONNEL_ADMIN) from $uro.role
 $a: Absence()
 $at: Person() from $a.getOwner()
 $target: Office(persons contains $at) from $uro.office
 $c: PermissionCheck(
     permission.startsWith("/rest/v4/absencesGroups/save") && httpMethod.equalsIgnoreCase('POST'),
     toCheck(), target == $target)
then
 $c.grant();
end

/* Azioni eseguibili da qualsiasi utente che abbiano come destinatario
 * dell'azione se stesso
*/
rule HasRightOnHimselfExceptFor
when
  $p: Person(user == currentUser)
  $c: PermissionCheck(
      !permission.startsWith("/rest/v4/absencesGroups/insertSimulation") && httpMethod != 'POST',
      toCheck(), target == $p, granted == false)
then
 $c.grant();
end


/*
 * L'Amministratore del personale in sola lettura può fare quasi tutto sulle persone del proprio ufficio
 */
rule HasRightOnPerson
when
  $uro: UsersRolesOffices(role.name == Role.PERSONNEL_ADMIN_MINI)
  $o: Office() from $uro.office
  $c: PermissionCheck(
      !permission.startsWith("/rest/v4/absencesGroups/insertSimulation") && httpMethod != 'POST',
      toCheck(), $o.persons contains target, granted == false)
then
 $c.grant();
end


rule OnlyForPersonnelAdmin_Generic
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.PERSONNEL_ADMIN) from $uro.role
 $c: PermissionCheck(
    (permission.startsWith("/rest/v4/absencesGroups/groupsForCategory") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/absencesGroups/insertSimulation") && httpMethod.equalsIgnoreCase('POST')) ||
    (permission.startsWith("/rest/v4/absencesGroups/findCode") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/absencesGroups/save") && httpMethod.equalsIgnoreCase('POST')),
    toCheck(), target == null, granted == false)
then
 $c.grant();
end

rule OnlyForPersonnelAdmin_InOffice
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.PERSONNEL_ADMIN) from $uro.role
 $o: Office(usersRolesOffices contains $uro)
 $c: PermissionCheck(
    (permission.startsWith("/rest/v4/absencesGroups/groupsForCategory") && httpMethod.equalsIgnoreCase('POST')) ||
    (permission.startsWith("/rest/v4/absencesGroups/insertSimulation") && httpMethod.equalsIgnoreCase('POST')) ||
    (permission.startsWith("/rest/v4/absencesGroups/findCode") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/absencesGroups/save") && httpMethod.equalsIgnoreCase('POST')),
    toCheck(), target == $o, granted == false)
then
 $c.grant();
end

/************************************************************************************
 * L'amministratore può inserire le timbrature nel passato senza limiti (per ora)
 * il controllo che non sia una data futura viene fatta nell'action (sulle stampings)
 ************************************************************************************/
rule adminCanInsertStampingsAndAbsences_inDate
when
  $uro: UsersRolesOffices() from userRolesOffices
  Role(name == Role.PERSONNEL_ADMIN) from $uro.role
  $target: YearMonth()
  $c: PermissionCheck(
      !permission.startsWith("/rest/v4/absencesGroups/insertSimulation") && httpMethod != 'POST',
      toCheck(), target == $target, granted == false)
then
 $c.grant();
end

/**************************************************************************************
 * Azioni per utente employee abilitato alla assenza lavoro fuori sede con convenzione
 **************************************************************************************/
rule Working_offsite_with_convention
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.EMPLOYEE) from $uro.role
 $p: Person() from currentUser.getPerson()
 $o: Office() from $p.office
 Configuration(epasParam == EpasParam.WORKING_OFF_SITE, fieldValue == true) from $o.configurations
 PersonConfiguration(epasParam == EpasParam.OFF_SITE_ABSENCE_WITH_CONVENTION, fieldValue == true) from $p.personConfigurations
 $c: PermissionCheck(
      (permission.startsWith("/rest/v4/absencesGroups/insertSimulation") && httpMethod.equalsIgnoreCase('POST')) ||
      (permission.startsWith("/rest/v4/absencesGroups/save") && httpMethod.equalsIgnoreCase('POST')),
      toCheck(), target == null, granted == false)
then
 $c.grant();
end

/**************************************
 * Azioni per utente employee abilitato
 **************************************/
rule Absences_person
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.EMPLOYEE) from $uro.role
 $p: Person() from currentUser.getPerson()
 PersonConfiguration(epasParam == EpasParam.ADDITIONAL_HOURS
 				|| epasParam == EpasParam.COVID_19
 				|| epasParam == EpasParam.RIGHT_TO_STUDY
 				|| epasParam == EpasParam.DISABLED_PERSON_PERMISSION
 				|| epasParam == EpasParam.DISABLED_RELATIVE_PERMISSION
 				|| epasParam == EpasParam.TELEWORK
 				|| epasParam == EpasParam.ENABLE_TELEWORK_STAMPINGS_FOR_WORKTIME
 				|| epasParam == EpasParam.AGILE_WORK_OR_DISABLED_PEOPLE_ASSISTANCE
 				|| epasParam == EpasParam.SMARTWORKING
 				|| epasParam == EpasParam.PARENTAL_LEAVE_FOR_FATHERS && fieldValue == true) from $p.personConfigurations
 $c: PermissionCheck(
      (permission.startsWith("/rest/v4/absencesGroups/insertSimulation") && httpMethod.equalsIgnoreCase('POST')) ||
      (permission.startsWith("/rest/v4/absencesGroups/save") && httpMethod.equalsIgnoreCase('POST')),
      toCheck(), target == null, granted == false)
then
 $c.grant();
end

/********************************************************
 * Azioni per utente employee abilitato per visita medica
 ********************************************************/
rule Absences_person_medical_exam
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.EMPLOYEE) from $uro.role
 $p: Person() from currentUser.getPerson()
 $o: Office() from $p.office
 Configuration(epasParam == EpasParam.PEOPLE_ALLOWED_INSERT_MEDICAL_EXAM && fieldValue == true) from $o.configurations
 $c: PermissionCheck(
      (permission.startsWith("/rest/v4/absencesGroups/insertSimulation") && httpMethod.equalsIgnoreCase('POST')) ||
      (permission.startsWith("/rest/v4/absencesGroups/save") && httpMethod.equalsIgnoreCase('POST')),
      toCheck(), target == null, granted == false)
then
 $c.grant();
end

/************************************************************************************
 * Un dipendente può autocertificare le proprie assenze per il lavoro fuori Sede se...
 ***********************************************************************************/
rule employeeCanInsertAbsencesOffsiteWithConvention
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.EMPLOYEE) from $uro.role
 $p: Person() from currentUser.getPerson()
 $o: Office() from $p.office
 Configuration(epasParam == EpasParam.WORKING_OFF_SITE, fieldValue == true) from $o.configurations
 PersonConfiguration(epasParam == EpasParam.OFF_SITE_ABSENCE_WITH_CONVENTION, fieldValue == true) from $p.personConfigurations
 $c: PermissionCheck(
 permission.startsWith("/rest/v4/absencesGroups/insertSimulation") && httpMethod.equalsIgnoreCase('POST'),
 toCheck(), target == $p, granted == false)
then
 $c.grant();
end

/************************************************************
 * Un dipendente può autocertificare le proprie assenze se...
 ************************************************************/
rule employeeCanInsertAbsences
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.EMPLOYEE) from $uro.role
 $p: Person() from currentUser.getPerson()
 PersonConfiguration((epasParam == EpasParam.COVID_19 && fieldValue == true)
 				|| (epasParam == EpasParam.DISABLED_PERSON_PERMISSION && fieldValue == true)
 				|| (epasParam == EpasParam.DISABLED_RELATIVE_PERMISSION && fieldValue == true)
 				|| (epasParam == EpasParam.RIGHT_TO_STUDY && fieldValue == true)
 				|| (epasParam == EpasParam.TELEWORK && fieldValue == true)
 				|| (epasParam == EpasParam.ADDITIONAL_HOURS && fieldValue == true)
 				|| (epasParam == EpasParam.PARENTAL_LEAVE_AND_CHILD_ILLNESS && fieldValue == true)
 				|| (epasParam == EpasParam.SECOND_DISABLED_RELATIVE_PERMISSION && fieldValue == true)
 				|| (epasParam == EpasParam.AGILE_WORK_OR_DISABLED_PEOPLE_ASSISTANCE && fieldValue == true)
 				|| (epasParam == EpasParam.SMARTWORKING && fieldValue == true)
 				|| (epasParam == EpasParam.AGILE_WORK && fieldValue == true)
 				|| (epasParam == EpasParam.PARENTAL_LEAVE_FOR_FATHERS && fieldValue == true)) from $p.personConfigurations
 $c: PermissionCheck(
 permission.startsWith("/rest/v4/absencesGroups/insertSimulation") && httpMethod.equalsIgnoreCase('POST'),
     toCheck(), target == $p, granted == false)
then
 $c.grant();
end

/******************************************************************************
 * Un dipendente può autocertificare le proprie assenze per visita medica se...
 *****************************************************************************/

rule employeeCanInsertMedicalExam
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.EMPLOYEE) from $uro.role
 $p: Person() from currentUser.getPerson()
 $o: Office() from $p.office
 Configuration(epasParam == EpasParam.PEOPLE_ALLOWED_INSERT_MEDICAL_EXAM && fieldValue == true) from $o.configurations
 $c: PermissionCheck(
      permission.startsWith("/rest/v4/absencesGroups/insertSimulation") && httpMethod.equalsIgnoreCase('POST'),
      toCheck(), target == $p, granted == false)
then
 $c.grant();
end



/*******************************************************************************
 * Azioni utente con ruolo BADGE_READER
 ******************************************************************************/

rule Stampings_create
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.BADGE_READER) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/stampingsfromclient/create") ||
    permission.startsWith("/rest/v4/stampingsfromclient/createnotrecompute"),
    toCheck(), target == null)
 then
 $c.grant();
end

rule Stampings_create_InOffice
when
 $uro: UsersRolesOffices() from userRolesOffices
 $o: Office(usersRolesOffices contains $uro)
 Role(name == Role.BADGE_READER) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/stampingsfromclient/create") ||
    permission.startsWith("/rest/v4/stampingsfromclient/createnotrecompute"),
    toCheck(), target == $o)
then
 $c.grant();
end

/*******************************************************************************
 * Gestione dei dati degli ufficio ruolo TECHNICAL_ADMIN
 ******************************************************************************/

rule Offices_show_and_update_technical_admin
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.TECHNICAL_ADMIN) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/offices/create") ||
    permission.startsWith("/rest/v4/offices/show") ||
    permission.startsWith("/rest/v4/offices/update") ||
    permission.startsWith("/rest/v4/offices/delete") ||
    permission.startsWith("/rest/v4/offices/users"),
    toCheck(), target == null)
 then
 $c.grant();
end

rule Offices_show_and_update_technical_admin_InOffice
when
 $uro: UsersRolesOffices() from userRolesOffices
 $o: Office(usersRolesOffices contains $uro)
 Role(name == Role.TECHNICAL_ADMIN) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/offices/create") ||
    permission.startsWith("/rest/v4/offices/show") ||
    permission.startsWith("/rest/v4/offices/update") ||
    permission.startsWith("/rest/v4/offices/delete") ||
    permission.startsWith("/rest/v4/offices/users"),
    toCheck(), target == $o)
then
 $c.grant();
end

/*******************************************************************************
 * Gestione dei dati degli contratti tramite il ruolo REGISTRY_MANAGER
 ******************************************************************************/

rule Contracts_show_and_update_contract_manager
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.REGISTRY_MANAGER) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/contracts/create") ||
    (permission.startsWith("/rest/v4/contracts/") && httpMethod.equalsIgnoreCase('GET')) ||
    permission.startsWith("/rest/v4/contracts/update") ||
    permission.startsWith("/rest/v4/contracts/delete") ||
    permission.startsWith("/rest/v4/contracts/linkPreviousContract") ||
    permission.startsWith("/rest/v4/contracts/unlinkPreviousContract"),
    toCheck(), target == null)
 then
 $c.grant();
end

rule Contracts_show_and_update_contract_manager_InOffice
when
 $uro: UsersRolesOffices() from userRolesOffices
 $o: Office(usersRolesOffices contains $uro)
 Role(name == Role.REGISTRY_MANAGER) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/contracts/create") ||
    (permission.startsWith("/rest/v4/contracts/") && httpMethod.equalsIgnoreCase('GET')) ||
    permission.startsWith("/rest/v4/contracts/update") ||
    permission.startsWith("/rest/v4/contracts/delete") ||
    permission.startsWith("/rest/v4/contracts/linkPreviousContract") ||
    permission.startsWith("/rest/v4/contracts/unlinkPreviousContract"),
    toCheck(), target == $o)
then
 $c.grant();
end

/*******************************************************************************
 * Gestione dei dati delle persone tramite il ruolo REGISTRY_MANAGER
 ******************************************************************************/

rule Persons_show_and_update_registry_manager
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.REGISTRY_MANAGER) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/people/create") ||
    (permission.startsWith("/rest/v4/people/") && httpMethod.equalsIgnoreCase('GET')) ||
    permission.startsWith("/rest/v4/people/update") ||
    permission.startsWith("/rest/v4/people/delete"),
    toCheck(), target == null)
 then
 $c.grant();
end

rule Persons_show_and_update_registry_manager_InOffice
when
 $uro: UsersRolesOffices() from userRolesOffices
 $o: Office(usersRolesOffices contains $uro)
 Role(name == Role.REGISTRY_MANAGER) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/people/create") ||
    (permission.startsWith("/rest/v4/people/") && httpMethod.equalsIgnoreCase('GET')) ||
    permission.startsWith("/rest/v4/people/update") ||
    permission.startsWith("/rest/v4/people/delete"),
    toCheck(), target == $o)
then
 $c.grant();
end

/*******************************************************************************
 * Azioni utente con ruolo ABSENCE_MANAGER
 ******************************************************************************/
rule AbsenceManager
when
 $uro: UsersRolesOffices() from userRolesOffices
 $r: Role(name == "absenceManager") from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/absences"),
    toCheck(), target == null)
then
 System.out.println("uro = " + $uro);
 $c.grant();
end

rule AbsenceManager_InOffice
when
 $uro: UsersRolesOffices() from userRolesOffices
 $r: Role(name == "absenceManager") from $uro.role
 $p: Person(getOffice() == $uro.getOffice())
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/absences"),
    toCheck(), target == $p)
then
 $c.grant();
end


/*******************************************************************************
 * Questa parte per il nuovo ruolo supervisore della reperibilità
 ******************************************************************************/
rule isReperibilitySupervisor_generic
when
  $p: Person(reperibilityTypes != null && !reperibilityTypes.isEmpty()) from currentUser.getPerson()
  $o: Office() from $p.office
  Configuration(epasParam == EpasParam.ENABLE_CALENDAR_REPERIBILITY, fieldValue == true) from $o.configurations
  $c: PermissionCheck((permission.startsWith("/rest/v4/reperibilitycalendar")),
      toCheck(), target == null)
then
 $c.grant();
end

rule reperibilitySupervisorCanManagePersonReperibilityType
when
  $p: Person(reperibilityTypes != null && !reperibilityTypes.isEmpty()) from currentUser.getPerson()
  $o: Office() from $p.office
  Configuration(epasParam == EpasParam.ENABLE_CALENDAR_REPERIBILITY, fieldValue == true) from $o.configurations
  $prt: PersonReperibilityType() from $p.reperibilityTypes
  $c: PermissionCheck(
      permission.startsWith("/rest/v4/reperibilitycalendar"),
      toCheck(), target == $prt)
then
 $c.grant();
end

rule canManageReperibilityMonth
when
  $p: Person(reperibilityTypes != null && !reperibilityTypes.isEmpty()) from currentUser.getPerson()
  $o: Office() from $p.office
  Configuration(epasParam == EpasParam.ENABLE_CALENDAR_REPERIBILITY, fieldValue == true) from $o.configurations
  $prt: PersonReperibilityType() from $p.reperibilityTypes
  $target: ReperibilityTypeMonth((!approved && personReperibilityType == $prt) || this == null)
  $c: PermissionCheck(
      permission.startsWith("/rest/v4/reperibilitycalendar"),
      toCheck(), target == $target)
then
 $c.grant();
end

rule canEditReperibilityTypeMonth
when
  $p: Person(reperibilityTypes != null && !reperibilityTypes.isEmpty()) from currentUser.getPerson()
  $o: Office() from $p.office
  Configuration(epasParam == EpasParam.ENABLE_CALENDAR_REPERIBILITY, fieldValue == true) from $o.configurations
  $prt: PersonReperibilityType() from $p.reperibilityTypes
  $target: ReperibilityTypeMonth(personReperibilityType == $prt)
  $c: PermissionCheck(
      permission.startsWith("/rest/v4/reperibilitycalendar"),
      toCheck(), target == $target)
then
 $c.grant();
end

/*Fine parte di ruolo supervisore delle reperibilità*/


/*Inizio parte gestori delle reperibilità*/

rule isReperibilityManager_generic
when
  $p: Person(reperibilities != null && !reperibilities.isEmpty()) from currentUser.getPerson()
  $o: Office() from $p.office
  Configuration(epasParam == EpasParam.ENABLE_CALENDAR_REPERIBILITY, fieldValue == true) from $o.configurations
  $c: PermissionCheck(
      permission.startsWith("/rest/v4/reperibilitycalendar"),
      toCheck(), target == null)
then
 $c.grant();
end


rule reperibilityManagerCanManagePersonReperibilityType
when
  $p: Person(reperibilities != null && !reperibilities.isEmpty()) from currentUser.getPerson()
  $o: Office() from $p.office
  Configuration(epasParam == EpasParam.ENABLE_CALENDAR_REPERIBILITY, fieldValue == true) from $o.configurations
  $prt: PersonReperibilityType() from $p.reperibilities
  $c: PermissionCheck(
      permission.startsWith("/rest/v4/reperibilitycalendar"),
      toCheck(), target == $prt)
then
 $c.grant();
end

rule reperibilityManagercanManageReperibilityMonth
when
  $p: Person(reperibilities != null && !reperibilities.isEmpty()) from currentUser.getPerson()
  $o: Office() from $p.office
  Configuration(epasParam == EpasParam.ENABLE_CALENDAR_REPERIBILITY, fieldValue == true) from $o.configurations
  $prt: PersonReperibilityType() from $p.reperibilities
  $target: ReperibilityTypeMonth((!approved && personReperibilityType == $prt) || this == null)
  $c: PermissionCheck(
      permission.startsWith("/rest/v4/reperibilitycalendar"),
      toCheck(), target == $target)
then
 $c.grant();
end

/*Fine parte dei gestori delle reperibilità*/
