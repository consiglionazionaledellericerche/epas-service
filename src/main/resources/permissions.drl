import it.cnr.iit.epas.security.PermissionCheck
import it.cnr.iit.epas.models.enumerate.AccountRole
import it.cnr.iit.epas.models.UsersRolesOffices;
import it.cnr.iit.epas.models.Office;
import it.cnr.iit.epas.models.Person;
import it.cnr.iit.epas.models.Role;
import it.cnr.iit.epas.models.PersonReperibilityType;
import it.cnr.iit.epas.models.Configuration;
import it.cnr.iit.epas.models.ReperibilityTypeMonth;
import it.cnr.iit.epas.manager.configurations.EpasParam;

global it.cnr.iit.epas.models.User currentUser;
global java.util.Set userRoles;
global java.util.List userRolesOffices;

/*******************************************************************************
 * Azioni ruolo DEVELOPER e ADMIN
 ******************************************************************************/
rule SystemUsers
salience 1
activation-group 'admin'
when
  AccountRole(this in (AccountRole.DEVELOPER,AccountRole.ADMIN)) from userRoles
  $c: PermissionCheck(toCheck())
then
  $c.grant();
end

rule AnyUser
when
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/userinfo") ||
    permission.startsWith("/rest/v4/personinfo"),
    toCheck())
then
 $c.grant();
end

/*******************************************************************************
 * Azioni utente dipendente sui propri dati
 ******************************************************************************/

rule Employee_personal_data
when
 $c: PermissionCheck(
    (permission.startsWith("/rest/v4/vacations") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/monthrecaps") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/people") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/absences") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/competences") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/reperibilitycalendar") && httpMethod.equalsIgnoreCase('GET')),
    toCheck(), target == null)
then
 $c.grant();
end

rule IsEmployee_personal_data_usingTarget
when
 $p: Person(user == currentUser)
 $c: PermissionCheck(
    (permission.startsWith("/rest/v4/vacations") && httpMethod.equalsIgnoreCase('GET'))  ||
    (permission.startsWith("/rest/v4/monthrecaps") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/people") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/absences") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/competences") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/reperibilitycalendar") && httpMethod.equalsIgnoreCase('GET')),
    toCheck(), target == $p)
then
 $c.grant();
end

/*******************************************************************************
 * Visualizzazione e gestione ferie utente con ruolo PERSONNEL_ADMIN
 ******************************************************************************/

rule Vacation_show_and_manage_personnel_admin
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.PERSONNEL_ADMIN) from $uro.role
 $c: PermissionCheck(
    (permission.startsWith("/rest/v4/vacations") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/monthrecaps") && httpMethod.equalsIgnoreCase('GET')) ||
    permission.startsWith("/rest/v4/absences") ||
    (permission.startsWith("/rest/v4/competences") && httpMethod.equalsIgnoreCase('GET')),
    toCheck(), target == null)
then
 $c.grant();
end

rule Vacation_show_and_manage_personnel_admin_InOffice
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.PERSONNEL_ADMIN) from $uro.role
 $p: Person(user != currentUser, getOffice() == $uro.getOffice())
 $c: PermissionCheck(
    (permission.startsWith("/rest/v4/vacations") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/monthrecaps") && httpMethod.equalsIgnoreCase('GET')) ||
    permission.startsWith("/rest/v4/absences") ||
    (permission.startsWith("/rest/v4/competences") && httpMethod.equalsIgnoreCase('GET')),
    toCheck(), target == $p)
then
 $c.grant();
end

rule Vacation_show_and_manage_personnel_admin_InOffice_own_absences
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.PERSONNEL_ADMIN) from $uro.role
 $p: Person(qualification != null) from currentUser.getPerson()
 $c: PermissionCheck(
    (permission.startsWith("/rest/v4/vacations") && httpMethod.equalsIgnoreCase('GET')) ||
    (permission.startsWith("/rest/v4/monthrecaps") && httpMethod.equalsIgnoreCase('GET')) ||
    permission.startsWith("/rest/v4/absences") ||
    (permission.startsWith("/rest/v4/competences") && httpMethod.equalsIgnoreCase('GET')),
    toCheck(), target == $p)
then
 $c.grant();
end

/*******************************************************************************
 * Azioni utente con ruolo BADGE_READER
 ******************************************************************************/

rule Stampings_create
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.BADGE_READER) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/stampingsfromclient/create") ||
    permission.startsWith("/rest/v4/stampingsfromclient/createnotrecompute"),
    toCheck(), target == null)
 then
 $c.grant();
end

rule Stampings_create_InOffice
when
 $uro: UsersRolesOffices() from userRolesOffices
 $o: Office(usersRolesOffices contains $uro)
 Role(name == Role.BADGE_READER) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/stampingsfromclient/create") ||
    permission.startsWith("/rest/v4/stampingsfromclient/createnotrecompute"),
    toCheck(), target == $o)
then
 $c.grant();
end

/*******************************************************************************
 * Gestione dei dati degli ufficio ruolo TECHNICAL_ADMIN
 ******************************************************************************/

rule Offices_show_and_update_technical_admin
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.TECHNICAL_ADMIN) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/offices/create") ||
    permission.startsWith("/rest/v4/offices/show") ||
    permission.startsWith("/rest/v4/offices/update") ||
    permission.startsWith("/rest/v4/offices/delete") ||
    permission.startsWith("/rest/v4/offices/users"),
    toCheck(), target == null)
 then
 $c.grant();
end

rule Offices_show_and_update_technical_admin_InOffice
when
 $uro: UsersRolesOffices() from userRolesOffices
 $o: Office(usersRolesOffices contains $uro)
 Role(name == Role.TECHNICAL_ADMIN) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/offices/create") ||
    permission.startsWith("/rest/v4/offices/show") ||
    permission.startsWith("/rest/v4/offices/update") ||
    permission.startsWith("/rest/v4/offices/delete") ||
    permission.startsWith("/rest/v4/offices/users"),
    toCheck(), target == $o)
then
 $c.grant();
end

/*******************************************************************************
 * Gestione dei dati degli contratti tramite il ruolo REGISTRY_MANAGER
 ******************************************************************************/

rule Contracts_show_and_update_contract_manager
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.REGISTRY_MANAGER) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/contracts/create") ||
    (permission.startsWith("/rest/v4/contracts/") && httpMethod.equalsIgnoreCase('GET')) ||
    permission.startsWith("/rest/v4/contracts/update") ||
    permission.startsWith("/rest/v4/contracts/delete") ||
    permission.startsWith("/rest/v4/contracts/linkPreviousContract") ||
    permission.startsWith("/rest/v4/contracts/unlinkPreviousContract"),
    toCheck(), target == null)
 then
 $c.grant();
end

rule Contracts_show_and_update_contract_manager_InOffice
when
 $uro: UsersRolesOffices() from userRolesOffices
 $o: Office(usersRolesOffices contains $uro)
 Role(name == Role.REGISTRY_MANAGER) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/contracts/create") ||
    (permission.startsWith("/rest/v4/contracts/") && httpMethod.equalsIgnoreCase('GET')) ||
    permission.startsWith("/rest/v4/contracts/update") ||
    permission.startsWith("/rest/v4/contracts/delete") ||
    permission.startsWith("/rest/v4/contracts/linkPreviousContract") ||
    permission.startsWith("/rest/v4/contracts/unlinkPreviousContract"),
    toCheck(), target == $o)
then
 $c.grant();
end

/*******************************************************************************
 * Gestione dei dati delle persone tramite il ruolo REGISTRY_MANAGER
 ******************************************************************************/

rule Persons_show_and_update_registry_manager
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.REGISTRY_MANAGER) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/people/create") ||
    (permission.startsWith("/rest/v4/people/") && httpMethod.equalsIgnoreCase('GET')) ||
    permission.startsWith("/rest/v4/people/update") ||
    permission.startsWith("/rest/v4/people/delete"),
    toCheck(), target == null)
 then
 $c.grant();
end

rule Persons_show_and_update_registry_manager_InOffice
when
 $uro: UsersRolesOffices() from userRolesOffices
 $o: Office(usersRolesOffices contains $uro)
 Role(name == Role.REGISTRY_MANAGER) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/people/create") ||
    (permission.startsWith("/rest/v4/people/") && httpMethod.equalsIgnoreCase('GET')) ||
    permission.startsWith("/rest/v4/people/update") ||
    permission.startsWith("/rest/v4/people/delete"),
    toCheck(), target == $o)
then
 $c.grant();
end

/*******************************************************************************
 * Azioni utente con ruolo ABSENCE_MANAGER
 ******************************************************************************/
rule AbsenceManager
when
 $uro: UsersRolesOffices() from userRolesOffices
 $r: Role(name == "absenceManager") from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/absences"),
    toCheck(), target == null)
then
 System.out.println("uro = " + $uro);
 $c.grant();
end

rule AbsenceManager_InOffice
when
 $uro: UsersRolesOffices() from userRolesOffices
 $r: Role(name == "absenceManager") from $uro.role
 $p: Person(getOffice() == $uro.getOffice())
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/absences"),
    toCheck(), target == $p)
then
 $c.grant();
end


/*******************************************************************************
 * Questa parte per il nuovo ruolo supervisore della reperibilità
 ******************************************************************************/
rule isReperibilitySupervisor_generic
when
  $p: Person(reperibilityTypes != null && !reperibilityTypes.isEmpty()) from currentUser.getPerson()
  $o: Office() from $p.office
  Configuration(epasParam == EpasParam.ENABLE_CALENDAR_REPERIBILITY, fieldValue == true) from $o.configurations
  $c: PermissionCheck((permission.startsWith("/rest/v4/reperibilitycalendar")),
      toCheck(), target == null)
then
 $c.grant();
end

rule reperibilitySupervisorCanManagePersonReperibilityType
when
  $p: Person(reperibilityTypes != null && !reperibilityTypes.isEmpty()) from currentUser.getPerson()
  $o: Office() from $p.office
  Configuration(epasParam == EpasParam.ENABLE_CALENDAR_REPERIBILITY, fieldValue == true) from $o.configurations
  $prt: PersonReperibilityType() from $p.reperibilityTypes
  $c: PermissionCheck(
      permission.startsWith("/rest/v4/reperibilitycalendar"),
      toCheck(), target == $prt)
then
 $c.grant();
end

rule canManageReperibilityMonth
when
  $p: Person(reperibilityTypes != null && !reperibilityTypes.isEmpty()) from currentUser.getPerson()
  $o: Office() from $p.office
  Configuration(epasParam == EpasParam.ENABLE_CALENDAR_REPERIBILITY, fieldValue == true) from $o.configurations
  $prt: PersonReperibilityType() from $p.reperibilityTypes
  $target: ReperibilityTypeMonth((!approved && personReperibilityType == $prt) || this == null)
  $c: PermissionCheck(
      permission.startsWith("/rest/v4/reperibilitycalendar"),
      toCheck(), target == $target)
then
 $c.grant();
end

rule canEditReperibilityTypeMonth
when
  $p: Person(reperibilityTypes != null && !reperibilityTypes.isEmpty()) from currentUser.getPerson()
  $o: Office() from $p.office
  Configuration(epasParam == EpasParam.ENABLE_CALENDAR_REPERIBILITY, fieldValue == true) from $o.configurations
  $prt: PersonReperibilityType() from $p.reperibilityTypes
  $target: ReperibilityTypeMonth(personReperibilityType == $prt)
  $c: PermissionCheck(
      permission.startsWith("/rest/v4/reperibilitycalendar"),
      toCheck(), target == $target)
then
 $c.grant();
end

/*Fine parte di ruolo supervisore delle reperibilità*/


/*Inizio parte gestori delle reperibilità*/

rule isReperibilityManager_generic
when
  $p: Person(reperibilities != null && !reperibilities.isEmpty()) from currentUser.getPerson()
  $o: Office() from $p.office
  Configuration(epasParam == EpasParam.ENABLE_CALENDAR_REPERIBILITY, fieldValue == true) from $o.configurations
  $c: PermissionCheck(
      permission.startsWith("/rest/v4/reperibilitycalendar"),
      toCheck(), target == null)
then
 $c.grant();
end


rule reperibilityManagerCanManagePersonReperibilityType
when
  $p: Person(reperibilities != null && !reperibilities.isEmpty()) from currentUser.getPerson()
  $o: Office() from $p.office
  Configuration(epasParam == EpasParam.ENABLE_CALENDAR_REPERIBILITY, fieldValue == true) from $o.configurations
  $prt: PersonReperibilityType() from $p.reperibilities
  $c: PermissionCheck(
      permission.startsWith("/rest/v4/reperibilitycalendar"),
      toCheck(), target == $prt)
then
 $c.grant();
end

rule reperibilityManagercanManageReperibilityMonth
when
  $p: Person(reperibilities != null && !reperibilities.isEmpty()) from currentUser.getPerson()
  $o: Office() from $p.office
  Configuration(epasParam == EpasParam.ENABLE_CALENDAR_REPERIBILITY, fieldValue == true) from $o.configurations
  $prt: PersonReperibilityType() from $p.reperibilities
  $target: ReperibilityTypeMonth((!approved && personReperibilityType == $prt) || this == null)
  $c: PermissionCheck(
      permission.startsWith("/rest/v4/reperibilitycalendar"),
      toCheck(), target == $target)
then
 $c.grant();
end

/*Fine parte dei gestori delle reperibilità*/
